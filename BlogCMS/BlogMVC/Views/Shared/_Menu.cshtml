@using Microsoft.AspNet.Identity

@{
    var menus = new[]
    {
        new {LinkText = "Edit", ActionName="Index", ControllerName="Posts", Roles="admin"},
        new {LinkText = "Details", ActionName="Index", ControllerName="Posts", Roles="admin,writer,reader"},
        new {LinkText = "Delete", ActionName="Index", ControllerName="Posts", Roles="admin"},
        new {LinkText = "Posts", ActionName="Index", ControllerName="User", Roles="admin,writer,reader"},
        new {LinkText = "Edit Role", ActionName="Index", ControllerName="User", Roles="admin"}
    };
    
    if (User.Identity.IsAuthenticated)
    {
        //string role = Roles.GetRolesForUser().Single();
        string role = MyRoleManager.GetRoleForUser(User.Identity.GetUserId());
        var links = menus.Where(m => m.Roles.Split(',').Contains(role) && m.ControllerName == ViewContext.RouteData.Values["controller"].ToString()
            && m.ActionName == ViewContext.RouteData.Values["action"].ToString());
        
        var links2 = new []
             {
                new {LinkText = "Edit", ActionName="Index", ControllerName="Posts", Roles="writer"},
                new {LinkText = "Delete", ActionName="Index", ControllerName="Posts", Roles="writer"},
             };

        foreach (var link in links)
        {
            @: <li>@Html.ActionLink(@link.LinkText, "") </li>
        }

        
        if (ViewContext.RouteData.Values["controller"].ToString() == "Posts"
            && ViewContext.RouteData.Values["action"].ToString() == "Index"
            && (User.Identity.GetUserId() == ViewContext.RouteData.Values["id"].ToString()))
        {
            if (User.IsInRole("writer"))
            {
                foreach (var link in links2)
                {
                    @: <li>@Html.ActionLink(@link.LinkText, "") </li>
                }
            }
            @: <li>@Html.ActionLink("Create", "Create", null, new {id = ViewBag.Id}) </li>
        }
        
    }
}
